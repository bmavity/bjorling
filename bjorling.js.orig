var path = require('path')
	, xtend = require('xtend')

function Bjorling(filename, opts) {
	if(!(this instanceof Bjorling)) {
		return new Bjorling(filename, opts)
	}

	this._handlers = {}
<<<<<<< HEAD
	this._subscription = subscriptionFactory()
}

Bjorling.prototype.execute = function(handler, eventData, position) {
	var projectionName = this._projectionName
		, key = keys(projectionName, eventData)
		, filter

	function executeHandler(projectionName, state) {
		var context = {
					join: join
				, remove: remove
				}
			, initialState = {}
			, result

		function remove() {
			storage.remove(projectionName, state)
		}

		state = state || initialState

		try {
			result = handler.call(context, state, eventData)

			if(!result && state === initialState) {
				return
			}

			result = result || state

			storage.eventResult(projectionName, position, result, function(err) {
				if(err) console.log(err)
			})
		}
		catch(ex) {
			console.error('Error in bjorling handler: ', {
				name: projectionName
			, key: key
			, filter: filter
			, state: state
			, eventData: eventData
			})
		}
	}

	try {
		if(key) {
			return executeHandler(projectionName, storage.getState(projectionName, key))
		}

		filter = filters(projectionName, eventData)	
		if(filter) {
			return executeHandler(projectionName, storage.getState(projectionName, filter))
		}
	}
	catch(ex) {
		console.log(key, filter, ex.stack)
	}
}

Bjorling.prototype.getAll = function(cb) {
	storage.getAll(this._projectionName, cb)
=======
	this._key = opts.key
	this._projectionName = path.basename(filename, path.extname(filename))
	this._storage = opts.storage(this._projectionName, opts.key)
	this._transformers = {}
>>>>>>> dev-0.5
}

Bjorling.prototype.addIndex = function(index, cb) {
	this._storage.addIndex(index, cb)
}

Bjorling.prototype.when = function(handlers) {
	this._handlers = handlers//xtend(this._handlers, handlers)
}

Bjorling.prototype.transform = function(transformers) {
	this._transformers = transformers
}

Bjorling.prototype.processEvent = function(anEvent, cb) {
	var eventType = anEvent.__type
		, handlers = this._handlers
		, handler = handlers[eventType]
		, transformers = this._transformers
		, transformer = transformers[eventType]
		, storage = this._storage
		, eventData = anEvent.data
	if(!handler) return cb && cb()
	if(transformer) {
		eventData = transformer(eventData)
	}

	storage.get(eventData, function(err, state) {
		if(!state) {
			var keyVal = storage.getKeyValue(eventData)
			if(!keyVal) return cb && cb()

			var $new = handlers['$new']
			if($new) {
				state = $new(eventData)
			}
		}
		state = state || {}

		var stateToSave = handler.call(null, state, eventData)
		stateToSave = stateToSave || state
		storage.save(stateToSave, cb)
	})
}

function isObject(obj) {
	return Object.prototype.toString.call(obj) === '[object Object]'
}

Bjorling.prototype.get = function(queryObj, cb) {
	var query
	if(isObject(queryObj)) {
		query = queryObj
	} else {
		query = {}
		query[this._key] = queryObj
	}

	this._storage.get(query, cb)
}


module.exports = Bjorling
